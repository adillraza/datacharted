name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          cd /opt/datacharted-app
          
          # Backup current .env file
          cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
          
          # Pull latest changes
          git pull origin main
          
          # Check and restore email configuration if needed
          if ! grep -q "MAIL_PASSWORD=zzqh tfur yocr whhk" .env; then
            echo "Restoring email configuration..."
            python3 setup_live_email.py
          else
            echo "Email configuration intact"
          fi
          
          # Backup database before migration
          echo "📦 Backing up database before migration..."
          if [ -f "app_dev.db" ]; then
            cp app_dev.db app_dev.db.backup.$(date +%Y%m%d_%H%M%S)
            echo "✅ Database backup created"
          fi
          
          # Install dependencies and run migrations in virtual environment
          echo "📦 Installing dependencies and running migrations..."
          source venv/bin/activate && \
          pip install -r requirements.txt && \
          export FLASK_APP=run.py && \
          export FLASK_ENV=production && \
          echo "Current migration: $(flask db current)" && \
          (flask db upgrade || (echo "Migration failed, attempting to stamp and retry..." && flask db stamp head && flask db upgrade)) && \
          echo "✅ Database migrations completed successfully" && \
          echo "New migration: $(flask db current)" && \
          deactivate || {
            echo "❌ Database migration failed - stopping deployment"
            deactivate 2>/dev/null
            exit 1
          }
          
          # Restart service
          echo "🔄 Restarting service..."
          systemctl restart datacharted
          
          # Verify service started successfully
          if systemctl is-active --quiet datacharted; then
            echo "✅ Service restarted successfully"
          else
            echo "❌ Service failed to start"
            systemctl status datacharted --no-pager
            exit 1
          fi
          
          echo "Deployment completed successfully with email protection!"
