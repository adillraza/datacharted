name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT }}
        script: |
          cd /opt/datacharted-app
          
          # Backup current .env file
          cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
          
          # Pull latest changes
          git pull origin main
          
          # Check and restore email configuration if needed
          if ! grep -q "MAIL_PASSWORD=zzqh tfur yocr whhk" .env; then
            echo "Restoring email configuration..."
            python3 setup_live_email.py
          else
            echo "Email configuration intact"
          fi
          
          # Ensure database uses absolute path
          if ! grep -q "DATABASE_URL=sqlite:////opt/datacharted-app/app_dev.db" .env; then
            echo "Updating database URL to absolute path..."
            sed -i 's|DATABASE_URL=sqlite:///app_dev.db|DATABASE_URL=sqlite:////opt/datacharted-app/app_dev.db|' .env
          fi
          
          # Backup database before migration (keep only last 3 backups)
          echo "📦 Backing up database before migration..."
          if [ -f "app_dev.db" ]; then
            cp app_dev.db app_dev.db.backup.$(date +%Y%m%d_%H%M%S)
            echo "✅ Database backup created"
            # Clean up old backups (keep only last 3)
            ls -t app_dev.db.backup.* 2>/dev/null | tail -n +4 | xargs -r rm -f
            echo "🧹 Cleaned up old database backups"
          fi
          
          # Fix database permissions and install dependencies
          echo "📦 Installing dependencies and running migrations..."
          
          # Ensure proper ownership of database and app files
          chown -R www-data:www-data /opt/datacharted-app/
          chmod 664 app_dev.db 2>/dev/null || true
          
          # Install dependencies and run migrations
          source venv/bin/activate && \
          pip install -r requirements.txt && \
          export FLASK_APP=run.py && \
          export FLASK_ENV=production && \
          echo "Current migration: $(flask db current)" && \
          
          # Run database migrations safely
          if flask db upgrade; then
            echo "✅ Database migrations completed successfully"
          else
            echo "Migration failed, attempting to stamp and retry..."
            if flask db stamp head && flask db upgrade; then
              echo "✅ Database migrations completed successfully after stamping"
            else
              echo "❌ Database migration failed - attempting recovery..."
              # Try to create tables if migration completely fails
              python3 -c "
              from app import create_app, db
              app = create_app()
              with app.app_context():
                  try:
                      db.create_all()
                      print('✅ Database tables created as fallback')
                  except Exception as e:
                      print(f'❌ Database setup failed: {e}')
                      exit(1)
              " || {
                echo "❌ Database setup failed completely - stopping deployment"
                deactivate 2>/dev/null
                exit 1
              }
            fi
          fi && \
          
          # Final ownership fix
          chown -R www-data:www-data /opt/datacharted-app/ && \
          deactivate || {
            echo "❌ Database setup failed - stopping deployment"
            deactivate 2>/dev/null
            exit 1
          }
          
          # Restart service
          echo "🔄 Restarting service..."
          systemctl restart datacharted
          
          # Verify service started successfully
          if systemctl is-active --quiet datacharted; then
            echo "✅ Service restarted successfully"
          else
            echo "❌ Service failed to start"
            systemctl status datacharted --no-pager
            exit 1
          fi
          
          # Final verification
          echo "🔍 Verifying deployment..."
          
          # Test database connection
          source venv/bin/activate && python3 -c "from app import create_app; from app.models import User; app = create_app(); app.app_context().push(); users = User.query.count(); print(f'✅ Database working: {users} users found')" && deactivate
          
          # Test service health
          sleep 2
          if curl -s http://127.0.0.1:8000/ > /dev/null; then
            echo "✅ Flask app responding correctly"
          else
            echo "❌ Flask app not responding - check logs"
            exit 1
          fi
          
                        echo "🎉 Deployment completed successfully!"
              echo "📧 Email functionality preserved"
              echo "🔗 Your app is live at: https://datacharted.com"
              echo "🚀 Main domain optimization active"
              echo "🛡️ Database safety: All user data preserved"
          echo "💾 Database: Single app_dev.db with proper permissions"
          echo "⚙️  Service: Running with 3 gunicorn workers"
